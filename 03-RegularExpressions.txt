# javaScriptAlgorithmsDataStructuresFreecodecamp
## Regular Expressions
Start:  16/08/2020
Pomodoros:  
Notas: 
    - "Better Comments" ; Visual Studio Code
    - MAP arrastrado de 02-ES6-Challenges.txt
    
¡---------------------------------------------------------------->  
//--------------------------------------------------------------->

*==iMAP========================================================-->
todo --class, getters & setters--
class
get
set
//class
class ObjectName{
  constructor(x){
    this._attribute = x;
  }
  //getter
  get attribute(){
    return  this._attribute;
  }
  //setter
  set temperature(y){
    this._temperature = y;
  }
}
//use
const ObjectName = new ObjectName(z); //constructor use
let temp = ObjectName.attribute; //getter use
ObjectName.attribute = value; //setter use

todo --promise--
¡---
Promise
resolve
reject
then
catch
¡---
const makeServerRequest = new Promise((resolve,reject) =>{
    if(condition){
        resolve("Promise fulfilled");
    }else{
        reject("Promise rejected");
    }
});

makeServerRequest.then(result => {
  console.log(result);
});

ServerRequest.catch(error =>{
  console.log(error);
})

//estados de una promesa
pending
fulfilled()
rejected()

todo --import/export--
¡---
import
export
as
from
./
¡---
//file.js both in the same directory "./"
export {function1,function2};
import {function1,function2} from './index.js';
import * as myObject from './index.js';
//default fallback
export default function(){}
import variableName from "./index.js";

todo --built in Objects--
Date()
String()
Number()
Boolean()
Array()
RegExp()
Function()


todo --variables--
const
var
let


todo --ternary conditional--
¡---
?
:

¡---
condition ? code-true : code-false;

todo --loops--
while(cond){}
for ([initialization]; [condition]; [final-expression]){}
do{}while(condition);
if(){}else{}else return;


todo --object
var object = {att=value};
{} -> object literal
.
["']
delete -> para borrar un atributo de un objeto



todo --flux--
if
else if
else
switch
case
break
default

todo --definición de funciones--  
function myFunction(){}
let/var/const = function(a,b){};
x = Function()
//arrow functions
const x = () => {}
const x = () => "value"
const x = item => item * 2;
const x = (item1, item2) => item1 * item2;
//arrow function + object property shorthand
const x = (item1, item2) => ({item1 , item2}); 

todo --spread operator--
...

todo --rest parameter--
...

todo --memory structures--
[[{}],[{}]]

todo --methods of Global? Object--
Math.min()
Math.max()
Math.floor()
Math.random()
Math.round()
console.log()
parseInt()
  :* parseInt("")
  :* parseInt ("", radix)
Object.freeze()


todo --methods of objects--

//--string methods
repeat()
//--string + array methods
hasOwnProperty(propname) 
push()
pop()
shift()
unshift()
match()
splice()
concat()
tuUpperCase()

//--array methods
map()
filter()
reduce()
slice()
 
//especiales
call()
apply()




todo --properties--
'vale para strings y para arrays (borrame cuando me entiendas bien)
.length 

todo --tipos--
undefined 
null
boolean
string
symbol
bigint
number
object 

todo --operators--
: ! -> not
= -> asignación
+ -> adición/concatenation : number/string
- -> substraction
:* -> multiplication
/ -> division
++ -> increment
-- -> decrement
% -> remainder
+= -> 
-=
:*=
/=
typeof

todo --comparison operators--
'ojo todos los comparadores devuelven true/false --> borrar esto cuando esté asimilado.
==
=== [strict]
:!=
:!== [strict]
>
>=
<
<=


todo --escape chracters--
\"
\'
\\
\n
\r
\t
\b
\f

todo --postfix/prefix increment
++i -> prefix increment
i++ -> postfix increment
--i -> prefix decrement
i-- -> postfix decrement

todo --logical operators--
&&
||

¡ --ES6--

todo --use strict--
"use strict"

todo --destructuring assignment
const {key1,key2} = var
todo --template literals--
${}
`` -> back ticks


todo --Promise()--
const makeServerRequest = new Promise((resolve,reject) =>{
    if(condition){
        resolve("Promise fulfilled");
    }else{
        reject("Promise rejected");
    }
  
});

makeServerRequest.then(result => {
  console.log(result);
});

ServerRequest.catch(error =>{
  console.log(error);
})

//estados de una promesa
pending
fulfilled()
rejected()

todo --import/export--
//file.js both in the same directory "./"
export {function1,function2};
import {function1,function2} from './index.js';
import * as myObject from './index.js';
//default fallback
export default function(){}
import variableName from "./index.js";

todo --definición de funciones--  
function myFunction(){}
let/var/const = function(a,b){};
x = Function()
//arrow functions
const x = () => {}
const x = () => "value"
const x = item => item * 2;
const x = (item1, item2) => item1 * item2;
//arrow function + object property shorthand
const x = (item1, item2) => ({item1 , item2}); 

todo --spread operator--
...

todo --rest parameter--
...

todo --static reference/static object
let
const
Object.freeze()
let 
"use strict"
...
// destructuring assignment
const {key1,key2} = var
// template literals
${}
`` ->template string
./ 
export
import
get
set

todo --Passing object as a function parameter--
//setup
const stats = {max: 56.78, min: -0.75};
//def normal
const half = (stats) => (stats.max + stats.min) / 2.0; 
//definition using destructuring assignment
const half = (stats) =>{
    const{max,min} = stats;
    return (max + min) / 2.0; 
} 
//definition reduced (no entire object)
const half = ({max,min}) => (max + min) / 2.0; 
}
//use
console.log(half(stats));


//normal
const getMousePosition = (x,y) => ({x: x, y: y});
//object property shorthand
const getMousePosition = (x, y) => ({x , y});

¡ --regular expressions--
match()
test()
|
/regex/i
/regex/g
/./
[x-y]
[^regex]
/x+/
/x*/
/x?/
\W
\w
\d
\D
\s
\S
{min,max}
{min,}
{exact}
(?=...)
(?!...)
(|)
()/1
/^()()$/
replace(regex,"string")
"string".replace(/(\w+)\s(\w+)/,"$2 $1"); 

 
*==fMAP========================================================-->

¡---iDUDAS---->
string ="<h1>Winter is coming</h1>"
regex =/<.*?>/
¿Por qué el regex encuentra <h1> en el string?
.*?-> cualquier caracter que aparezca 0-infitas veces y además como es lazy, 

¡--fDUDAS----->



?==iSINTAXIS===================================================-->

://
todo --match()--
'string'.match(/regex/) ["instance1","instance2"]
todo --test()--
/regex/.test('string'); //true/false
todo --OR--
let petRegex = /dog|cat|bird|fish/
todo --flags--
/regex/ig;
* ignore case flag
 /regex/i
* global flag  all the regex that coincide, not only one
/regex/g
todo --other
*wild card character
/./
* character class/ character set
[]
* range of characters
-
//letter & numbers in the same regex
/[a-c2-5]/ 
* negated character set (caret)
[^regex]
//e.g.
/[^aeiou]/ig -> excluye vocales
* starting patterns
/^Start/
//e.g.
const eduString = "Edu es guapo";
const eduRegex = /^Edu/;
eduRegex.test(eduString); //true
* ending patterns ($anchor character)
/ending$/
//e.g.
const eduString = "Edu es guapo";
const eduRegex = /guapo$/;
eduRegex.test(eduString); //true

* character that appear one or more times
+
//e.g.
/a+/g 
  in "abc"  -> single match -> return ["a"]
  in "aabc" -> single match -> return ["aa"]
  in "abab" -> 2 matches    -> return ["a","a"]
* zero or more times
:*
* greedy match (the longest possible part of a string that fits the regex)
//e.g.
/t[a-z]*i/ vs titanic = titani
* lazy matching (la parte más pequeña de un string que satisface con el regex)
-> ?
//e.g. 0 caracteres ya satisfacen el regex porque * incluye de 0 a infinito
/t[a-z]*?i/ vs titanic = ti
//e.g. 2
/e?le?/ vs "angel" = "el"
/e?le?/ vs "angle" = "le"
//e.g 3
/goo?d/ vs god true; vs good true; vs goood true;
todo --shorthand character classes
* \w 
[A-Za-z0-9_]
//e.g. Un regex que cuenta el número de caracter alfanuméricos
let example = "Esto es un ejemplo";
let regexAlfabeto = /\w/g;
let resultado = example.match(regexAlfabeto).length; // match devuelve un array con todas las coincidencias.
* \W
[^A-Za-z0-9_]
//e.g.
let regex = /\W/
let numeros = 42%;
let letras = "Edu!";
letras.match(regex); //["!"]
numeros.match(%);
//e.g. contar los caracteres no alfanuméricos
let eduString = "¡Me cago en la p$%#!";
let noAlphaRegex = /\W/g;
let resultado = eduString.match(noAlphaRegex).length;
hola
* \d
[0-9]
* \D
[^0-9]
* 2 o más 
[a-z][a-z]+
\d\d+
* espacios en blanco
\s == [ \r\t\f\n\v]
incluye
\r -> retorno de carro
\t -> tabulador
\f -> form feed/next page
\n -> next line
\v ->vertical tab
* todo menos espacios en blanco 
/S [^ \r\t\f\n\v]
* quantity specifiers
{}
//Que a aparezca un mínimo de 3 veces y un máximo de 5
miRegex= /a{3,5}h/;
let prueba = "aah";
let prueba2 = "aaah";
miRegex.test(prueba); //false
miRegex.test(prueba2); //true
*  {,} (at least X)
let str1 = "pizzza";
let str2 = "piza";
let regex = /piz{2,}a/;
regex.test(str1); // true;
regex.test(str2); // false;
* optional character 
?
//eg
const fav = "favorite";
let favReg =  /favou?rite/;
let result = favReg.test(fav);//true
* mixed grouping
(|)
replace(regex,string)
replace((\w+),"$1")




?==fSINTAXIS===================================================-->
todo==iTeoría==================================================-->

*1. test() es un método de objetos tipo expresión regular, al que le pasamos como parámetro un string para ver si tiene un regex o no. 
    * Devuelve true/false
*2 Los regex son case sensitive
*3 match() es un método que hacemos a un string, le pasamos un regex como argumento y devuelve un array una instancia
*4 si ponemos a = /regex/g al hacer 'string'.match(a) match devolverá todas la instancias y no sólo 1.
*5 las flags se pueden combinar /regex/gi
*6 . es cualquier caracter
*7 [] Significa cualquier de los aquí presentes
*8 si hacemos un match de un string y colocamos un regex como argumento para el cual no se encuentra nada, match()
  * devuelve "null"
*9 Para incluir en un regex un rango de letras debemos usar primero corchetes y después un guión /[a-c]/
*10 Si queremos incluir tanto un rango de letras como de número en la misma expresión, se ponen primero las letras y luego los números sin separar
/[a-z0-1]/
* 11 Si queremos excluir algo se pone el caret ^ /[^0-9]/g esto excluye todos los números
* 12 Si queremos excluir varias expresiones hay que volver a poner el caret
  Ej: Exclusión de vocales y números /[^aeiou^0-9]/
* 13 Tanto * como + se usan con caracteres sueltos
* 14 Cualquier caracter seguido de + tiene que aparecer al menos una vez mientras que sie está seguido de * no hace falta que aparezca
  let frase = "ba zarra";
  let regexMas      = /bah+/
  let regexAsterico = /bah*/
  regexMas.test(frase); // false
  regexAsterisco.test(frase); //true
* 15 /go*/ indica que coga "g" y "o" de 0 a infinitas veces, por lo que si hago un match con gooooooool devolverá
  * [goooooooo]
* 16 Recuerda, el que hace el test es el regex
  regex.test('string');
* 17 El que hace match o no es el string
  string.match(regex);
* 18 repeat() genera un nuevo string repitiendo un número de veces el string que invoca el método
let str = "Edu";
let resultado = str.repeat(3); //resultado = "EduEduEdu";
* 19 lookaheads: se aseguran de que haya o no haya ciertos patrones en un string pero sin hacer match
  * Positivo: ?=...
  * Negativo ?!...
  eg.
  let kiss = "xo";
  let nokiss = "xu";
  let kissregex = /x(?= o)/;
  let nokissregex = /x(?! o)/;
  //no hacen match
  kiss.match(kissregex); // ["q"]
  nokiss.match(nokissregex); // ["q"]

* 20 Los lookahead sirven también para comprobar si hay 1 o más patrones en un string
let password = "abc123";
let checkPass = /(?=\w{3,6})(?=\D*\d)/

* 21 Edu, recuerdar, el match() lo hacen los strings y se pasa como argumento el regex
* 22 Ejercicio de (capture groups
let repeatNum = "42 42 42";
let reRegex = /^(\d+)\s\1\s\1$/; // Change this line
let result = reRegex.test(repeatNum);
¡analisis
(\d+)-> cualquier número de 1 o más cifras metido en un grupo : 42
\s-> espacio
\1-> repetición 42
\s ->espacio
\1 -> repetición 42
(42 42 42)
Ahora, hay que decirle al regex que sólo mire la pauta que le hemos puesto (\d+)\s\1\s\1 42 42 42
y para delimitarlo hay que poner ^ al comienzo y $ al final o seguirá buscando
¡no sé porqué pero es así¡




todo==fTeoría==================================================-->
!=iSNIPPETS===================================================-->
*1. Encuentra un regex dentro de un string y devulve un array con todas los ejemplos encontrados
let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; 
let result = extractStr.match(codingRegex); 

*2. Un programa que devuelva en un array, todas las vocales de un string en order.
let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let  vowelRegex= /[aeiou]/ig; 
let result = quoteSample.match(vowelRegex);

*3 Regex que encuentra si la s está escrita más de una vez seguida
let difficultSpelling = "Mississippi";
let myRegex = /s+/g;
let result = difficultSpelling.match(myRegex);
console.log(result); //[ 'ss', 'ss' ]

*4 Un regex que devuelva solo <h1> de un <h1>Winter is coming</h1> sin usar h1
¡la verdad es que no entiendo porqué
let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?>/; // 
let result = text.match(myRegex);
console.log(result);

*5 Un programa que cuenta el número de caracteres alfanuméricos de un string usando regex y un 
  * shorthand character class (\x)
  //e.g. Un regex que cuenta el número de caracter alfanuméricos
let example = "Esto es un ejemplo";
let regexAlfabeto = /\w/g;
let resultado = example.match(regexAlfabeto).length; // match devuelve un array con todas las coincidencias.

* Reto de expresiones regulares. 
1) Usernames can only use alpha-numeric characters.
2) The only numbers in the username have to be at the end. There can be zero or more of them at the end. Username cannot start with the number.
3) Username letters can be lowercase and uppercase.
4) Usernames have to be at least two characters long. A two-character username can only use alphabet letters as characters.
* SOLUCIÓN
let username = "JackOfAllTrades";
let userCheck = /^[a-z][a-z]+\d*$|^[a-z]\d\d$/i;
let result = userCheck.test(username);
*ANÁLISIS
// 1) Usernames can only use alpha-numeric characters.
Conjunto de a-z y 0-1 y _ 
// 2) The only numbers in the username have to be at the end. There can be zero or more of them at the end. Username cannot start with the number.
Si los números tienen que ir al final tenemos que distinguir letras de números.
[a-z] letras
[0-9] números
Los números sólo pueden ir al final
Sabemos que esto se hace poniendo $, luego la regex debe terminar así [0-9]$ o \n$
Puede haber cero o más números al final \n*$
El usuario no puede empezar por un número
^[a-z][0-9]*$
//3) Username letters can be lowercase and uppercase.
luego hay que poner //i
/^[a-z][0-9]*$/i
Vemos que JACK no la coge, porqué? porque tiene que aceptar + de 1 letra
/^[a-z]+[0-9]*$/i
//4) Usernames have to be at least two characters long. A two-character username can only use alphabet letters as characters.
El usuario debe tener al menos dos caracteres
Para escribir dos o más elementos :
[x][x]+
Si como mínimo son 2 caracteres y tiene que empezar por una letra tiene que ser o 2 letras o 1 letra y 1 número como mínimo

Pero además nos dicen que si tiene dos caracteres tienen que ser letras  
/^[a-z][a-z]+[0-9]*$|^[a-z][a-z]+[0-9]*$/i
Aquí no entra Z97, porque en la segunda opción estamos diciendo que tiene que ser 2 o más letras, probemos quitándole una letra
/^[a-z][a-z]+[0-9]*$|^[a-z][0-9]*$/i
No nos deja porque el usuario J no debería entrar ya que tiene una letra y cero números,
/^[a-z][a-z]+[0-9]*$|^[a-z][0-9][0-9]*$/i
No nos deja porque A1 no lo debería coger, ya que si tiene 2 caracteres 2 tienen que ser letras
Una solución es poner que tienen que ser al menos 2 números -> [0-9][0-9]+
/^[a-z][a-z]+[0-9]*$|^[a-z][0-9][0-9]+$/i
Bien!

*6 Una expresión regular que sólo permite "ohh no" pero el número de h permitidas es de 3 a 6
let ohStr = "Ohhh no";
let ohRegex = /oh{3,6}\sno/i;
ler result = ohRegex.test(ohStr);

* 7 Análisis de ejercicio Regular Expressions: Positive and Negative Lookahead
let sampleWord = "astronaut";
let pwRegex = /(?=^\D\w{5,})(?=\w*\d{2})/; // Change this line
let result = pwRegex.test(sampleWord);
Use lookaheads in the pwRegex to match 
//passwords that are greater than 5 characters long, do not begin with numbers, and have two consecutive digits.
1. Lo primero que tenemos que tener en cuenta es que los lookahead que usemos deben valer para todo el string. Tenemos que crear los
lookahead para que sean inclusivos de todos los casos permitidos y, al mismo tiempo, filtren aquellos casos que no queremos que entren.
2. Los passwords deben ser mayores que 5 caracteres -> {5,}
3. Los passwords no deben empezar por un número ^/D
4. deben haber 2 números consecutivos /d{2}
5. Cómo juntamos los 3 requerimientos?
(?=^\D) -> no puede empezar por un dígito [x]
(?=\w{5,})-> debe tener al menos 5 caracteres 
(?=\w*\d{2}) -> este es el más díficil
Si ponemos (?=\d{2}) estamos diciendo que en todo el string sólo hay 2 digitos, tenemos que poner que puede haber, además de dichos dígitos,
un número indeterminado de caracteres o estaríamos filtrando aquellos passwords que, además de tener 2 dígitos tienen antes de 0 a un número
indefinido de caracteres.

* 8 Un programa que filtra permitiendo Franklin o Eleanor + Roosevelt y admite un nombre de pila entre ellos
.*-> cualquier caracter de cero a infinitas veces (incluye las caracteres en blanco)

let myString = "Eleanor Roosevelt";
let myRegex = /(Franklin|Eleanor).*\sRoosevelt/;
let result = myRegex.test(myString); 

* 9 Un programa que elimina los espacios al principio y al final de los string
let hello = "   Hello, World!  ";
let wsRegex = /^\s+|\s+$/g; // Change this line
let result = hello.replace(wsRegex,""); // Change this line
console.log(result);
¡analisis¡
Necesitamos un regex por el que cambiar un string vacío
debe ser o un espacio al principio o un espacio al final (^\s|\s$)
Puede haber más de un espacio al principio y al final (^\s+|\s$+)
Para que no pare de buscar después de haber encontrado un match se hace global \g, porque si hay espacios al principio podría parar
así que también hay que ponerlo al final.

!=fSNIPPETS===================================================-->